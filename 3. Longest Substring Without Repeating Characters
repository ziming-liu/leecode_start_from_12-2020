/*
3. Longest Substring Without Repeating Characters
Medium

12098

649

Add to List

Share
Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Example 4:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
Accepted
1,880,793
Submissions
6,067,763
Seen this question in a real interview before?

Yes

No
*/










class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.size()==0){
            return 0;
        }
        if(s.size()==1){
            return 1;
        }
        int p=0,q=1;
        int max_len=0;
        for(q=1;q<s.size();q++){
            int flag=-1;
            int z;
            
            // is repeated 判断是否有重复字符
            for(z=p;z<q;z++){
                if(s[z]==s[q]){
                    flag=z; // there is the repeated.
                    break;
                }
            }
            // 重复字符，两种情况，1-sub string的首字母与p字母重复了，sub string长度不变，整体后移一位。2-重复字符在sub string中间，这时需要跳跃 左边index p 到重复位置flag的下一位置，去寻找可能的更长sub string，PS：这种情况下，本次跳跃可能使得sub string 更短了，因此要记得及时保存max len
            if((flag!=-1)){
                if((q-p)>max_len){ // 前置index p 如果要跳跃，sub sting可能变短， 先存一次max len
                    max_len = q-p;
                }
                p=1+flag;
            }
            
        }
        if((q-p)>max_len){ // 得到最后的sub string， 计算 max len
            max_len = q-p;
        }
        return max_len;
        
    }
};
